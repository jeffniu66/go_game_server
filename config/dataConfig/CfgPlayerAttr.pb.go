// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: CfgPlayerAttr.proto

package dataConfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// key:["ID"]
type CfgPlayerAttr struct {
	ID                   int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	InitData             int32    `protobuf:"varint,2,opt,name=InitData,proto3" json:"InitData,omitempty"`
	IncData              int32    `protobuf:"varint,3,opt,name=IncData,proto3" json:"IncData,omitempty"`
	MaxData              int32    `protobuf:"varint,4,opt,name=MaxData,proto3" json:"MaxData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CfgPlayerAttr) Reset()         { *m = CfgPlayerAttr{} }
func (m *CfgPlayerAttr) String() string { return proto.CompactTextString(m) }
func (*CfgPlayerAttr) ProtoMessage()    {}
func (*CfgPlayerAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_CfgPlayerAttr_8d3f258389b6b2f9, []int{0}
}
func (m *CfgPlayerAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CfgPlayerAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CfgPlayerAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CfgPlayerAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CfgPlayerAttr.Merge(dst, src)
}
func (m *CfgPlayerAttr) XXX_Size() int {
	return m.Size()
}
func (m *CfgPlayerAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_CfgPlayerAttr.DiscardUnknown(m)
}

var xxx_messageInfo_CfgPlayerAttr proto.InternalMessageInfo

func (m *CfgPlayerAttr) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CfgPlayerAttr) GetInitData() int32 {
	if m != nil {
		return m.InitData
	}
	return 0
}

func (m *CfgPlayerAttr) GetIncData() int32 {
	if m != nil {
		return m.IncData
	}
	return 0
}

func (m *CfgPlayerAttr) GetMaxData() int32 {
	if m != nil {
		return m.MaxData
	}
	return 0
}

type PlayerAttrConfigData struct {
	Config               []*CfgPlayerAttr `protobuf:"bytes,1,rep,name=config" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PlayerAttrConfigData) Reset()         { *m = PlayerAttrConfigData{} }
func (m *PlayerAttrConfigData) String() string { return proto.CompactTextString(m) }
func (*PlayerAttrConfigData) ProtoMessage()    {}
func (*PlayerAttrConfigData) Descriptor() ([]byte, []int) {
	return fileDescriptor_CfgPlayerAttr_8d3f258389b6b2f9, []int{1}
}
func (m *PlayerAttrConfigData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerAttrConfigData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerAttrConfigData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerAttrConfigData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerAttrConfigData.Merge(dst, src)
}
func (m *PlayerAttrConfigData) XXX_Size() int {
	return m.Size()
}
func (m *PlayerAttrConfigData) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerAttrConfigData.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerAttrConfigData proto.InternalMessageInfo

func (m *PlayerAttrConfigData) GetConfig() []*CfgPlayerAttr {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*CfgPlayerAttr)(nil), "dataConfig.CfgPlayerAttr")
	proto.RegisterType((*PlayerAttrConfigData)(nil), "dataConfig.PlayerAttrConfigData")
}
func (m *CfgPlayerAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CfgPlayerAttr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCfgPlayerAttr(dAtA, i, uint64(m.ID))
	}
	if m.InitData != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCfgPlayerAttr(dAtA, i, uint64(m.InitData))
	}
	if m.IncData != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCfgPlayerAttr(dAtA, i, uint64(m.IncData))
	}
	if m.MaxData != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCfgPlayerAttr(dAtA, i, uint64(m.MaxData))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerAttrConfigData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerAttrConfigData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Config) > 0 {
		for _, msg := range m.Config {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCfgPlayerAttr(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCfgPlayerAttr(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CfgPlayerAttr) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCfgPlayerAttr(uint64(m.ID))
	}
	if m.InitData != 0 {
		n += 1 + sovCfgPlayerAttr(uint64(m.InitData))
	}
	if m.IncData != 0 {
		n += 1 + sovCfgPlayerAttr(uint64(m.IncData))
	}
	if m.MaxData != 0 {
		n += 1 + sovCfgPlayerAttr(uint64(m.MaxData))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerAttrConfigData) Size() (n int) {
	var l int
	_ = l
	if len(m.Config) > 0 {
		for _, e := range m.Config {
			l = e.Size()
			n += 1 + l + sovCfgPlayerAttr(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCfgPlayerAttr(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCfgPlayerAttr(x uint64) (n int) {
	return sovCfgPlayerAttr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CfgPlayerAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCfgPlayerAttr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CfgPlayerAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CfgPlayerAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCfgPlayerAttr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitData", wireType)
			}
			m.InitData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCfgPlayerAttr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitData |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncData", wireType)
			}
			m.IncData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCfgPlayerAttr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncData |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxData", wireType)
			}
			m.MaxData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCfgPlayerAttr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxData |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCfgPlayerAttr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCfgPlayerAttr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerAttrConfigData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCfgPlayerAttr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerAttrConfigData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerAttrConfigData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCfgPlayerAttr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCfgPlayerAttr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config, &CfgPlayerAttr{})
			if err := m.Config[len(m.Config)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCfgPlayerAttr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCfgPlayerAttr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCfgPlayerAttr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCfgPlayerAttr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCfgPlayerAttr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCfgPlayerAttr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCfgPlayerAttr
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCfgPlayerAttr
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCfgPlayerAttr(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCfgPlayerAttr = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCfgPlayerAttr   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("CfgPlayerAttr.proto", fileDescriptor_CfgPlayerAttr_8d3f258389b6b2f9) }

var fileDescriptor_CfgPlayerAttr_8d3f258389b6b2f9 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x76, 0x4e, 0x4b, 0x0f,
	0xc8, 0x49, 0xac, 0x4c, 0x2d, 0x72, 0x2c, 0x29, 0x29, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x4a, 0x49, 0x2c, 0x49, 0x74, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0x57, 0xca, 0xe7, 0xe2, 0x45,
	0x51, 0x22, 0xc4, 0xc7, 0xc5, 0xe4, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1a, 0xc4, 0xe4,
	0x99, 0x22, 0x24, 0xc5, 0xc5, 0xe1, 0x99, 0x97, 0x59, 0xe2, 0x92, 0x58, 0x92, 0x28, 0xc1, 0x04,
	0x16, 0x85, 0xf3, 0x85, 0x24, 0xb8, 0xd8, 0x3d, 0xf3, 0x92, 0xc1, 0x52, 0xcc, 0x60, 0x29, 0x18,
	0x17, 0x24, 0xe3, 0x9b, 0x58, 0x01, 0x96, 0x61, 0x81, 0xc8, 0x40, 0xb9, 0x4a, 0x9e, 0x5c, 0x22,
	0x08, 0xdb, 0x20, 0x8e, 0x00, 0xeb, 0x30, 0xe4, 0x62, 0x4b, 0x06, 0xf3, 0x24, 0x18, 0x15, 0x98,
	0x35, 0xb8, 0x8d, 0x24, 0xf5, 0x10, 0xae, 0xd4, 0x43, 0x71, 0x62, 0x10, 0x54, 0xa1, 0x93, 0xc0,
	0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c,
	0x43, 0x12, 0x1b, 0xd8, 0x83, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xc5, 0x3d, 0xe7,
	0xf7, 0x00, 0x00, 0x00,
}
