/*
* This file generated by Acinconfig tool, don't modify it manually!
*
* proto content:
////////////////////////////////////////////////////////////////////////
syntax = "proto3";
package dataConfig;

// key:["Id"]
message CfgVersion{
	int32 Id = 1;		//唯一id
	int32 BigVersion = 2;		//大版本号
	int32 SmallVersion = 3;		//小版本号
}

message VersionConfigData{
	repeated CfgVersion config = 1;
}

////////////////////////////////////////////////////////////////////////
*/

package dataConfig

import (
	"crypto/md5"
	"encoding/hex"
	"fmt"
	"go_game_server/config"
	"io"
	"io/ioutil"
	"os"

	"github.com/golang/protobuf/proto"
)

func getCfgVersionKey(Id int32) int64 {
	return int64(Id)
}

func GetCfgVersionMd5() string {
	file, err := os.Open("./config/protoConfig/CfgVersion.bytes")
	if err != nil {
		panic("file not exsit! %!s(MISSING)")
		return ""
	}
	defer file.Close()
	md5 := md5.New()
	io.Copy(md5, file)

	return hex.EncodeToString(md5.Sum(nil))
}

func GetCfgVersion(Id int32) *CfgVersion {
	key := getCfgVersionKey(Id)
	if item, ok := MapCfgVersion[key]; ok {
		return item
	}
	return nil
}

var MapCfgVersion = make(map[int64]*CfgVersion)

var Md5CfgVersion string

func init() {
	cfg := &VersionConfigData{}
	config.ConfigList = append(config.ConfigList, cfg)
	cfg.HotInit()
	Md5CfgVersion = GetCfgVersionMd5()
}
func (cfg *VersionConfigData) HotInit() {
	if Md5CfgVersion != GetCfgVersionMd5() {
		fmt.Println("1 = ", Md5CfgVersion, "2 = ", GetCfgVersionMd5())
		Md5CfgVersion = GetCfgVersionMd5()
		data, err := ioutil.ReadFile("./config/protoConfig/CfgVersion.bytes")
		if err != nil {
			panic("file not exsit! ./config/protoConfig/CfgVersion.bytes")
			return
		}

		err = proto.Unmarshal(data, cfg)
		if err != nil {
			panic("proto data unmarshal fail!")
			return
		}

		for _, item := range cfg.Config {
			key := getCfgVersionKey(item.Id)
			MapCfgVersion[key] = item
		}
	}
}
