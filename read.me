##
##批量查询redis

比如：
	查询所有user*中的WorldTrendMap字段
redis-cli -a huang@feng@wu$ keys "user*" | xargs 2>/dev/null -I {} -t -n 1 redis-cli -a huang@feng@wu$ Hget {} WorldTrendMap

2>/dev/null	// 忽略所有警告
-I {}		// 将{}替换成管道传过来的数据
-t			// 先终端打印命令
-n 1		// 每次只取一条数据


#### 外网打包流程
第一步：
```
make config     # 客户端转表后生成服务器配置
make proto      # 服务器协议
make build      # 构建服务器
make zip        # 打包服务器
make upload     # 上传到相应的服务器
```
注意：`make build`命令中使用了`upx`加壳，需要安装`sudo apt-get install upx`
第二步：
外网`make stop`, 查看一下确保关闭`ps -aux|grep main`
`cd slg_game_server/`,然后`rm -rf *`
第三步:
```
unzip slg.zip       # 外网机解压
cd script/
(假如改动大需要清空数据，`make mysql&&redis-cli`清空redis数据)
make cstart_nohup   # 启动服务器
```

#### 热更配置流程
第一步:
	更新SVN的配置表到最新
第二步:
	make config 生成最新的服务器配置表
第三步:
	拷贝最新配置到服务器
	scp -r ../config/protoConfig/* root@10.154.19.186:~/slg_game_server/config/protoConfig
	注意:
		一般只更新指定的配置,不要更新全部的配置
		scp -r ../config/protoConfig/指定的配置文件 root@10.154.19.186:~/slg_game_server/config/protoConfig
第四步:
	make hot_config	热更改变的配置


#### 同一台机器开多个服：
1.mysql新创建一个库(以game1为例), create database game1;
2.同时Makefile文件里面data_base = game1
3.修改pro_server.config

[server] # 服务器
address         = :10008
serverno	= 2+1

[mysql]
database = game1

[redis]
address  = 127.0.0.1:6001

[kafka]
game_2_battle = game_2_battle_1
battle_2_game = battle_2_game_1

#### 新开redis实例
1.复制一份redis配置，可以把配置命名为[redis端口号.conf]方便识别：
    cp /etc/redis.conf /etc/redis6001.conf
2.修改redis配置：
    vi /etc/redis6001.conf
    port 6001                           # 修改端口
    dbfilename dump6001.rdb             # 修改rdb文件名
    appendfilename "appendonly6001.aof" # 如果开启aof日志，改aof日志文件名
3.启动实例并连接：
	redis-server /etc/redis6001.conf & 	# 后台形式启动
    redis-cli -p 6001
4.查看启动情况：
    ps -aux|grep redis

#### redis数据迁移
一.rdb快照文件备份恢复方法
127.0.0.1:6379> config get dir # 查看rdb和aof文件路径
1) "dir"
2) "/var/lib/redis"
127.0.0.1:6379> bgsave
127.0.0.1:6379> info persistence
# Persistence
loading:0
rdb_changes_since_last_save:69
rdb_bgsave_in_progress:0   # 是否在执行bgsave操作
rdb_last_save_time:1573718956
rdb_last_bgsave_status:ok
rdb_last_bgsave_time_sec:17
rdb_current_bgsave_time_sec:-1

二.aof日志文件备份恢复方法
127.0.0.1:6379> bgrewriteaof
127.0.0.1:6379> info persistence
aof_enabled:1
aof_rewrite_in_progress:0  # 是否在进行AOF的重写操作
aof_rewrite_scheduled:0
aof_last_rewrite_time_sec:47
aof_current_rewrite_time_sec:-1
aof_last_bgrewrite_status:ok
aof_last_write_status:ok
aof_current_size:663333743
aof_base_size:663333743
aof_pending_rewrite:0
aof_buffer_length:0
aof_rewrite_buffer_length:0
aof_pending_bio_fsync:0
aof_delayed_fsync:0

生成的aof或者rdb文件，上传到相应的目标机器，使用这两个文件启动redis-server。
说明：rdb和aof数据迁移，适用于跨网络（网络隔离）的redis实例之间的数据迁移，
通过命令bgrewirteaof/bgsave生成aof或者rdb文件->移动到目标实例机器并启动，完成迁移。
差异：主要体现在数据格式和数据加载，aof为纯文本格式（redis文本协议的流水记录），
加载的过程相当于历史重放，而rdb为二进制文件，直接加载，一般情况下rdb数据加载比aof快！

三.主从复制
通过配置文件：从数据库的配置文件中加入slaveof master-ip master-port，主数据库无需配置
通过命令行参数：启动redis-server后命令行参数slaveof master-ip master port
127.0.0.1:6380> SLAVEOF 127.0.0.1 6379
SLAVEOF NO ONE可以是当前数据库停止接收其他数据库的同步，转成主Redis数据库，程序连接地址都改为新的redis库IP地址和端口。
适用于同一网络内的redis之间的数据迁移，在目标实例上通过指令（slaveof）完成数据全量复制迁移，在单实例的扩容应用上最适合。

info replication查看状态

四、redis在线数据迁移工具
https://www.jianshu.com/p/7e05a16dc961

#### 外网更新维护流程 ####

一.上传最新数据(将本地最新数据上传到目标机器, 注意要记得make build)
1. cd ./protoConfig/
2. scp * root@170.106.80.5:~/slg_game_server/config/protoConfig

二.关闭外网服务器(PS:必须要先关闭外网服务器, 然后再操作第三步上传本地最新的main)
1. cd ./script
2. make stop

三.上传最新二进制执行文件main(将本地最新的main上传到目标机器, 注意要记得先make proto, make config, make build)
1. cd ./script
2. make proto
3. make build
4. scp main root@170.106.80.5:~/slg_game_server/script

四.开服!!!
1. cd ./script
2. make cstart_nohup

#### 数据库备份
1、备份mysql，script目录上的bakmysql.sh
使用mysql自带的mysqldump命令备份到/data目录，会使用tar进行压缩，格式为game{日期}.tar.gz
2、备份redis，script目录上的bakredis.sh
备份rdb，使用redis的bgsave的命令，然后每个2秒，去判断是否备份好，然后使用tar压缩到/data目录，格式为rdb{日期}.tar.gz
3、使用linux自带的crond进行定时备份
crontab -e进入编辑模式
0 3 * * * /root/slg_game_server/script/bakmysql.sh
0 3 * * * /root/slg_game_server/script/bakredis.sh
crontab的相关语法
星号（*）：代表所有可能的值，如month字段为星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。
逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”
中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”
正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。

##### Facebook邀请服务器
1、dev_server.config或者pro_server.config中的facebook中的address配置端口
2、gateway工程中的facebookserver/config目录下的server.json需要配置游戏服的fb_invite_port端口（和1中的一致）
